/* eslint-disable no-console */

import { transform as svgr } from '@svgr/core';
import { transform } from '@babel/core';
import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import recursive from 'recursive-readdir';
import mkdirp from 'mkdirp';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');
const srcDir = path.join(rootDir, 'svgs');
const outputDir = path.join(rootDir, 'react');
const banner = '// Generated by @gasket/assets\n';

// Minimal babel config - only transform JSX to React.createElement calls
const babelOptions = {
  presets: ['@babel/preset-react'],
  plugins: []
};

/**
 * Reads and converts an svg file to react component.
 * @param {string} file - Path of file to process
 * @returns {Promise} promise
 */
async function processFile(file) {
  const outFile = file.replace(srcDir, outputDir).replace('.svg', '.js');

  try {
    const data = await fs.readFile(file);

    //
    // Convert to React
    //
    const component = await svgr(data);

    //
    // Transform JSX to React.createElement calls (needed for gasket-cjs)
    //
    const results = transform(component, babelOptions);

    //
    // Output the results to file
    //
    await mkdirp(path.dirname(outFile));
    await fs.writeFile(outFile, banner + results.code, 'utf8');
    console.log('wrote', path.relative(rootDir, outFile));
    return Promise.resolve();
  } catch (e) {
    console.error(`Error for ${file}.`, e);
    return Promise.reject(e);
  }
}

/**
 * Find all the *.svg files in the ./svgs dir, and convert them to browser
 * compatible React components into the ./react dir.
 * @returns {Promise} promise
 */
async function main() {
  const promises = [];
  let successCount = 0;
  let errorCount = 0;

  const filterSvg = (f, stats) => !stats.isDirectory() && path.extname(f) !== '.svg';
  const files = await recursive(srcDir, [filterSvg]);

  files.forEach(file => {
    promises.push(processFile(file)
      .then(() => successCount++, () => errorCount++)
    );
  });

  await Promise.all(promises);

  await fs.writeFile(path.join(outputDir, 'index.js'),
    `import emblem from './gasket-emblem.js';
import logo from './gasket-logo.js';
export { emblem, logo };
`, 'utf8');
  console.log('wrote index.js');

  console.log('-------');
  console.log(`Processed ${successCount}/${files.length} files.`);
  if (errorCount) {
    console.error(`Errors ${errorCount}.`);
    // eslint-disable-next-line no-process-exit
    process.exit(1);
  }
}

main();
