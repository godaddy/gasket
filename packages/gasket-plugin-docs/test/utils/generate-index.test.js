/* eslint-disable max-nested-callbacks, max-len */
const path = require('path');

const emptyDocsConfigSet = {
  app: {
    name: 'test-app',
    description: 'Some test app',
    link: 'README.md#overview',
    targetRoot: '/path/to/app/.docs/test-app'
  },
  plugins: [],
  presets: [],
  modules: [],
  structures: [],
  commands: [],
  lifecycles: [],
  transforms: [],
  configurations: [],
  root: '/path/to/app',
  docsRoot: '/path/to/app/.docs'
};

const fullDocsConfigSet = {
  app: {
    name: 'test-app',
    description: 'Some test app',
    link: 'README.md#overview',
    targetRoot: '/path/to/app/.docs/test-app'
  },
  plugins: [{
    name: 'example-plugin',
    link: 'README.md',
    targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin'
  }],
  presets: [{
    name: 'example-preset',
    link: 'README.md',
    targetRoot: '/path/to/app/.docs/test-app/presets/example-preset'
  }],
  modules: [{
    name: 'example-module',
    link: 'README.md',
    targetRoot: '/path/to/app/.docs/test-app/modules/example-module'
  }],
  structures: [{
    name: 'example-structure',
    link: 'README.md#structures',
    targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin'
  }, {
    name: 'example-structure-no-link',
    targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin'
  }],
  commands: [{
    name: 'example-command',
    link: 'README.md#commands',
    targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin'
  }],
  guides: [{
    name: 'Example Guide',
    link: 'docs/guide.md',
    targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin'
  }],
  lifecycles: [{
    name: 'example-lifecycle',
    link: 'README.md#lifecycles',
    targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin'
  }, {
    name: 'example-lifecycle-deprecated',
    link: 'README.md#lifecycles',
    targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin',
    deprecated: true
  }],
  transforms: [],
  configurations: [{
    name: 'example-gasket-config-param',
    link: 'README.md#configurations',
    description: 'example-description',
    type: 'string',
    default: 'example-default',
    targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin',
    from: 'example-plugin'
  }, {
    name: 'some-example-gasket-config-param',
    description: 'some-description',
    type: 'string',
    default: 'some-default',
    targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin',
    from: 'some-plugin'
  }],
  root: '/path/to/app',
  docsRoot: '/path/to/app/.docs'
};

const mockWriteFileStub = jest.fn();

jest.mock('fs', () => ({
  promises: {
    writeFile: mockWriteFileStub
  }
}));

const generateIndex = require('../../lib/utils/generate-index');
const { generateContent } = generateIndex;

describe('Utils - generateIndex', () => {

  it('writes README.md in docs root', async () => {
    await generateIndex(fullDocsConfigSet);
    expect(mockWriteFileStub.mock.calls[0][0]).toEqual(path.join(fullDocsConfigSet.docsRoot, 'README.md'));
  });

  it('writes generated content to file', async () => {
    const mockContent = await generateContent(fullDocsConfigSet);
    await generateIndex(fullDocsConfigSet);
    expect(mockWriteFileStub.mock.calls[0][1]).toEqual(mockContent);
  });

  describe('generateContent', () => {

    it('adds generated comment', async () => {
      const content = await generateContent(fullDocsConfigSet);
      expect(content).toContain('<!-- generated by `gasket docs` -->');
    });

    it('adds section for app', async () => {
      const content = await generateContent(fullDocsConfigSet);
      expect(content).toContain('# App');
    });

    describe('links', () => {

      it('adds reference links', async () => {
        const content = await generateContent(fullDocsConfigSet);
        expect(content).toContain('<!-- LINKS -->');
        //
        // count the number of ref-style links
        //
        expect(content.match(/\[.+]:/g) || []).toHaveLength(11);
      });

      it('makes unique references', async () => {
        const content = await generateContent({
          ...emptyDocsConfigSet,
          structures: [{
            name: 'example-structure',
            link: 'README.md#structures',
            targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin'
          }, {
            name: 'example-structure',
            link: 'README.md#structures',
            targetRoot: '/path/to/app/.docs/test-app/plugins/example-plugin'
          }]
        });
        expect(content).toContain('[example-structure]:');
        expect(content).toContain('[1]:');
        expect(content).toContain('[example-structure][1]');
      });

      it('links are relative to output dir', async () => {
        const config = fullDocsConfigSet.structures[0];
        const expected = path.relative(fullDocsConfigSet.docsRoot, path.join(config.targetRoot, config.link));
        const content = await generateContent(fullDocsConfigSet);
        expect(content).toContain(`[${config.name}]:`);
        expect(content).toContain(`:${expected}`);
      });

      it('add link fallbacks if configured', async () => {
        const config = fullDocsConfigSet.configurations[1];
        const content = await generateContent(fullDocsConfigSet);
        expect(content).toContain(`[${config.name}]:`);
      });

      it('does not add links if not configured', async () => {
        const config = fullDocsConfigSet.structures[1];
        const content = await generateContent(fullDocsConfigSet);
        expect(content).not.toContain(`[${config.name}]:`);
      });
    });

    describe('Sections', () => {

      /**
       * Check a section of the generated content
       * @param name
       * @param title
       * @param includeVersion
       * @param additionalHeaders
       * @returns {void}
       */
      function checkSection(name, title, includeVersion, additionalHeaders = []) {
        const fullContent = generateContent(fullDocsConfigSet);

        it(`adds section title`, () => {
          expect(fullContent).toContain(`## ${title}`);
        });

        it(`adds section table`, () => {
          expect(fullContent).toContain('| Name');
          expect(fullContent).toContain('| Description');
          expect(fullContent).toContain('| ----');
        });

        if (includeVersion) {
          it(`includes version in table`, () => {
            expect(fullContent).toContain('| Version');
            expect(fullContent).toContain('| ----');
          });
        }

        if (additionalHeaders.length) {
          it(`includes additional headers in table`, () => {
            additionalHeaders.forEach(h => {
              expect(fullContent).toContain(`| ${h}`);
              expect(fullContent).toContain('| ----');
            });
          });

          it(`includes additional header values in table`, () => {
            additionalHeaders.forEach(h => {
              const value = fullDocsConfigSet[name][0][h.toLowerCase()];
              expect(fullContent).toContain(`| ${value}`);
              expect(fullContent).toContain('| ----');
            });
          });
        }

        it(`table name is link`, () => {
          const config = fullDocsConfigSet[name][0];
          expect(fullContent).toContain(`| [${config.name}] `);
        });

        if (name === 'lifecycles') {
          it(`supports lifecycle deprecated property`, () => {
            const config = fullDocsConfigSet[name][1];
            expect(fullContent).toContain(`${config.name} (deprecated)`);
          });
        }

        const emptyContent = generateContent(emptyDocsConfigSet);
        it(`does not add section if no configs`, () => {
          expect(emptyContent).not.toContain(`## ${title}`);
        });
      }

      describe('plugins', () => {
        checkSection('plugins', 'Plugins', true);
      });

      describe('presets', () => {
        checkSection('presets', 'Presets', true);
      });

      describe('modules', () => {
        checkSection('modules', 'Modules', true);
      });

      describe('commands', () => {
        checkSection('commands', 'Commands');
      });

      describe('lifecycles', () => {
        checkSection('lifecycles', 'Lifecycles');
      });

      describe('structures', () => {
        checkSection('structures', 'Structures');
      });

      describe('guides', () => {
        checkSection('guides', 'Guides');
      });

      describe('configurations', () => {
        checkSection('configurations', 'Configurations', false, ['Type', 'Default']);
      });
    });
  });
});
